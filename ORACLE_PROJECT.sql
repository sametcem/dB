--DROP TABLE CLASSES;
--DROP TABLE CLASSESINPOOLLINE;
--DROP TABLE DEPARTMENT;
--DROP TABLE IDENTITYCARD;
--DROP TABLE ITEM;
--DROP TABLE ORGANISATION;
--DROP TABLE POOL;
--DROP TABLE POOLLINE;
--DROP TABLE PURCHASEITEM;
--DROP TABLE STAFFMEMBER;
--DROP TABLE SWIMMER;
--DROP TABLE SWIMMING;

-- tables
-- Table: Classes
CREATE TABLE Classes (
    IdClasses integer  NOT NULL,
    StartsHour timestamp  NOT NULL,
    FinishHour timestamp  NOT NULL,
    Price number(10,2)  NOT NULL,
    CONSTRAINT Classes_pk PRIMARY KEY (IdClasses)
) ;

-- Table: ClassesInPoolLine
CREATE TABLE ClassesInPoolLine (
    IdCiplClasses integer  NOT NULL,
    IdCiplPoolLine integer  NOT NULL,
    CONSTRAINT ClassesInPoolLine_pk PRIMARY KEY (IdCiplClasses,IdCiplPoolLine)
) ;

-- Table: Department
CREATE TABLE Department (
    IdDept integer  NOT NULL,
    DeptName varchar2(20)  NOT NULL,
    CONSTRAINT Department_pk PRIMARY KEY (IdDept)
) ;

-- Table: IdentityCard
CREATE TABLE IdentityCard (
    IdIdentityCard integer  NOT NULL,
    IdSwimmer integer  NOT NULL,
    ActivateDate date  NOT NULL,
    FinishingDate date  NULL,
    CONSTRAINT IdentityCard_pk PRIMARY KEY (IdIdentityCard)
) ;

-- Table: Item
CREATE TABLE Item (
    IdItem integer  NOT NULL,
    ItemName varchar2(30)  NOT NULL,
    Price number(10,2)  NOT NULL,
    CONSTRAINT Item_pk PRIMARY KEY (IdItem)
) ;

-- Table: Organisation
CREATE TABLE Organisation (
    idOrganisation integer  NOT NULL,
    which_staffmember integer  NOT NULL,
    which_class integer  NOT NULL,
    CONSTRAINT Organisation_pk PRIMARY KEY (idOrganisation)
) ;

-- Table: Pool
CREATE TABLE Pool (
    IdPool integer  NOT NULL,
    Name varchar2(40)  NOT NULL,
    Capacity number(10,2)  NOT NULL,
    Location varchar2(40)  NOT NULL,
    CONSTRAINT Pool_pk PRIMARY KEY (IdPool)
) ;

-- Table: PoolLine
CREATE TABLE PoolLine (
    IdPoolLine integer  NOT NULL,
    LineNumber number(10,2)  NOT NULL,
    IdPool integer  NOT NULL,
    CONSTRAINT PoolLine_pk PRIMARY KEY (IdPoolLine)
) ;

-- Table: PurchaseItem
CREATE TABLE PurchaseItem (
    IdPurchaseItem integer  NOT NULL,
    IdSwimmer integer  NOT NULL,
    IdItem integer  NOT NULL,
    Dates date  NOT NULL,
    CONSTRAINT PurchaseItem_pk PRIMARY KEY (IdPurchaseItem)
) ;

-- Table: StaffMember
CREATE TABLE StaffMember (
    IdStaffMember integer  NOT NULL,
    FirstName varchar2(30)  NOT NULL,
    LastName varchar2(30)  NOT NULL,
    DateofBirth date  NOT NULL,
    Position varchar2(30)  NOT NULL,
    Salary number(10,2)  NOT NULL,
    Email varchar2(250)  NOT NULL,
    IdDept integer  NOT NULL,
    CONSTRAINT StaffMember_pk PRIMARY KEY (IdStaffMember)
) ;

-- Table: Swimmer
CREATE TABLE Swimmer (
    IdSwimmer integer  NOT NULL,
    FirstName varchar2(40)  NOT NULL,
    LastName varchar2(40)  NOT NULL,
    DateOfBirth date  NOT NULL,
    PhoneNumber number(10,2)  NOT NULL,
    Email varchar2(250)  NOT NULL,
    CONSTRAINT Swimmer_pk PRIMARY KEY (IdSwimmer)
) ;

-- Table: Swimming
CREATE TABLE Swimming (
    IdSwimmingIdentityCard integer  NOT NULL,
    IdSwimmingClasses integer  NOT NULL,
    CONSTRAINT Swimming_pk PRIMARY KEY (IdSwimmingIdentityCard,IdSwimmingClasses)
) ;

-- foreign keys
-- Reference: ClassesInPoolLine_Classes (table: ClassesInPoolLine)
ALTER TABLE ClassesInPoolLine ADD CONSTRAINT ClassesInPoolLine_Classes
    FOREIGN KEY (IdCiplClasses)
    REFERENCES Classes (IdClasses);

-- Reference: ClassesInPoolLine_PoolLine (table: ClassesInPoolLine)
ALTER TABLE ClassesInPoolLine ADD CONSTRAINT ClassesInPoolLine_PoolLine
    FOREIGN KEY (IdCiplPoolLine)
    REFERENCES PoolLine (IdPoolLine);

-- Reference: IdPoolLine_Pool (table: PoolLine)
ALTER TABLE PoolLine ADD CONSTRAINT IdPoolLine_Pool
    FOREIGN KEY (IdPool)
    REFERENCES Pool (IdPool);

-- Reference: Organisation_Classes (table: Organisation)
ALTER TABLE Organisation ADD CONSTRAINT Organisation_Classes
    FOREIGN KEY (which_class)
    REFERENCES Classes (IdClasses);

-- Reference: Organisation_StaffMember (table: Organisation)
ALTER TABLE Organisation ADD CONSTRAINT Organisation_StaffMember
    FOREIGN KEY (which_staffmember)
    REFERENCES StaffMember (IdStaffMember);

-- Reference: PurchaseItem_ItemShop (table: PurchaseItem)
ALTER TABLE PurchaseItem ADD CONSTRAINT PurchaseItem_ItemShop
    FOREIGN KEY (IdItem)
    REFERENCES Item (IdItem);

-- Reference: PurchaseItem_Swimmer (table: PurchaseItem)
ALTER TABLE PurchaseItem ADD CONSTRAINT PurchaseItem_Swimmer
    FOREIGN KEY (IdSwimmer)
    REFERENCES Swimmer (IdSwimmer);

-- Reference: StaffMember_Department (table: StaffMember)
ALTER TABLE StaffMember ADD CONSTRAINT StaffMember_Department
    FOREIGN KEY (IdDept)
    REFERENCES Department (IdDept);

-- Reference: Swimming_Classes (table: Swimming)
ALTER TABLE Swimming ADD CONSTRAINT Swimming_Classes
    FOREIGN KEY (IdSwimmingClasses)
    REFERENCES Classes (IdClasses);

-- Reference: Swimming_IdentityCard (table: Swimming)
ALTER TABLE Swimming ADD CONSTRAINT Swimming_IdentityCard
    FOREIGN KEY (IdSwimmingIdentityCard)
    REFERENCES IdentityCard (IdIdentityCard);

-- Reference: Ticket_Swimmer (table: IdentityCard)
ALTER TABLE IdentityCard ADD CONSTRAINT Ticket_Swimmer
    FOREIGN KEY (IdSwimmer)
    REFERENCES Swimmer (IdSwimmer);


INSERT INTO DEPARTMENT(IDDEPT,DEPTNAME) VALUES
(15,'SPORT');
INSERT INTO DEPARTMENT(IDDEPT,DEPTNAME) VALUES
(25,'MEDICAL');
INSERT INTO DEPARTMENT(IDDEPT,DEPTNAME) VALUES
(35,'CLEANING');

INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1010,'KEITH','RICHARDS',TO_DATE('1976-05-13','YYYY-MM-DD'),'ACCOUNTANT',5000,'krichards@g.com',15);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1011,'MICK','JAGGER',TO_DATE('1973-07-16','YYYY-MM-DD'),'INSTRUCTOR',7500,'mjagger@g.com',25);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1012,'RONNIE','WOOD',TO_DATE('1980-01-07','YYYY-MM-DD'),'CLEANER',3500,'rwood@g.com',35);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1013,'RYAN','BABEL',TO_DATE('1993-03-22','YYYY-MM-DD'),'CLEANER',2000,'rbabel@g.com',35);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1014,'SAM','BLACK',TO_DATE('1971-11-19','YYYY-MM-DD'),'INSTRUCTOR',5000,'sblack@g.com',15);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1015,'JOHN','MAYER',TO_DATE('1994-03-07','YYYY-MM-DD'),'INSTRUCTOR',7000,'jmayer@g.com',25);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1016,'SYLWIA','FLOYD',TO_DATE('1964-02-05','YYYY-MM-DD'),'INSTRUCTOR',5500,'sfloyd@g.com',15);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1017,'KARINA','JOHANSSON',TO_DATE('1984-09-08','YYYY-MM-DD'),'ASSISTANT',5000,'kjohansson@g.com',35);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1018,'ALVARO','NEGREDO',TO_DATE('1973-12-10','YYYY-MM-DD'),'CLEANER',2500,'anegredo@g.com',35);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1019,'EMILIA','ROYAL',TO_DATE('1980-09-18','YYYY-MM-DD'),'DIRECTOR',9000,'eroyal@g.com',25);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1020,'PABLO','WATERS',TO_DATE('1960-10-23','YYYY-MM-DD'),'INSTRUCTOR',8000,'pwaters@g.com',35);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1021,'EDDIE','VEDDER',TO_DATE('1975-09-01','YYYY-MM-DD'),'DIRECTOR',8300,'evedder@g.com',15);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1022,'ERIC','CRAMER',TO_DATE('1969-03-21','YYYY-MM-DD'),'INSTRUCTOR',7000,'ecramer@g.com',15);
INSERT INTO STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1023,'ANTONY','POLLY',TO_DATE('1991-05-16','YYYY-MM-DD'),'ASSISTANT',4500,'apolly@g.com',25);

INSERT INTO CLASSES (IdClasses,StartsHour,FinishHour,Price) VALUES
(01, TO_DATE('2018-06-05 17:00:00', 'YYYY-MM-DD HH24:MI:SS'),TO_DATE('2018-06-05 19:00:00', 'YYYY-MM-DD HH24:MI:SS') ,50);
INSERT INTO CLASSES (IdClasses,StartsHour,FinishHour,Price) VALUES
(02, TO_DATE('2018-06-05 13:00:00', 'YYYY-MM-DD HH24:MI:SS'),TO_DATE('2018-06-05 16:00:00', 'YYYY-MM-DD HH24:MI:SS') ,70);
INSERT INTO CLASSES (IdClasses,StartsHour,FinishHour,Price)VALUES
(03, TO_DATE('2018-06-04 10:00:00', 'YYYY-MM-DD HH24:MI:SS'),TO_DATE('2018-06-04 12:00:00', 'YYYY-MM-DD HH24:MI:SS') ,80);
INSERT INTO CLASSES (IdClasses,StartsHour,FinishHour,Price)VALUES
(04, TO_DATE('2018-06-03 17:00:00', 'YYYY-MM-DD HH24:MI:SS'),TO_DATE('2018-06-03 19:00:00', 'YYYY-MM-DD HH24:MI:SS'),90);
INSERT INTO CLASSES (IdClasses,StartsHour,FinishHour,Price)VALUES
(05, TO_DATE('2018-06-02 09:00:00', 'YYYY-MM-DD HH24:MI:SS'),TO_DATE('2018-06-02 10:00:00', 'YYYY-MM-DD HH24:MI:SS') ,50);

INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(01,1010,03);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(02,1011,01);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(03,1012,01);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(04,1013,02);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(05,1014,02);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(06,1015,03);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(07,1016,04);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(08,1017,02);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(09,1018,03);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(10,1019,01);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(11,1020,05);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(12,1021,02);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(13,1022,01);
INSERT INTO ORGANISATION (IdOrganisation,which_staffmember,which_class) VALUES
(14,1023,03);

INSERT INTO ITEM (IDITEM,ITEMNAME,PRICE) VALUES
(0001,'POOL NOODLE',10);
INSERT INTO ITEM (IDITEM,ITEMNAME,PRICE)VALUES
(0002,'GOGGLES',20);
INSERT INTO ITEM (IDITEM,ITEMNAME,PRICE) VALUES
(0003,'SWIM CAP',5);
INSERT INTO ITEM (IDITEM,ITEMNAME,PRICE) VALUES
(0004,'ARMBANDS',15);
INSERT INTO ITEM (IDITEM,ITEMNAME,PRICE)VALUES
(0005,'SWIM SUIT',50);
INSERT INTO ITEM (IDITEM,ITEMNAME,PRICE)VALUES
(0006,'SWIMFIN',20);


INSERT INTO SWIMMER(IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL)VALUES
(9001,'JAMES','BROWN',TO_DATE('1992-04-25','YYYY-MM-DD'),79025589,'jbrown@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9002,'ABBY','FLOWER',TO_DATE('1993-11-09','YYYY-MM-DD'),79022132,'aflower@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9003,'DOROTA','HONEY',TO_DATE('1982-09-05','YYYY-MM-DD'),79022359,'dhoney@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9004,'MICHEAL','DONARUMMA',TO_DATE('1994-04-01','YYYY-MM-DD'),79721892,'mdonarumma@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9005,'BETTY','RAMOS',TO_DATE('1998-05-03','YYYY-MM-DD'),79273892,'bramos@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL)  VALUES
(9006,'HELEN','ELLIOT',TO_DATE('1995-04-21','YYYY-MM-DD'),79022349,'helliot@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9007,'SANDRA','AGUERO',TO_DATE('1982-01-30','YYYY-MM-DD'),72123789,'saguero@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL)  VALUES
(9008,'CAROL','WERNER',TO_DATE('1999-03-31','YYYY-MM-DD'),76234789,'cwerner@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL)  VALUES
(9009,'RUTH','TAYLOR',TO_DATE('1990-06-12','YYYY-MM-DD'),98765633,'rtaylor@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL)  VALUES
(9010,'DONNA','MARTIN',TO_DATE('1993-06-19','YYYY-MM-DD'),74236723,'dmartin@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL)  VALUES
(9011,'RUDY','DAVIES',TO_DATE('1996-05-31','YYYY-MM-DD'),73478239,'rdavies@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9012,'CHARLES','WILSON',TO_DATE('1991-10-13','YYYY-MM-DD'),75483282,'cwilson@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9013,'JOSEPH','EVANS',TO_DATE('1989-03-22','YYYY-MM-DD'),79236427,'jevans@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9014,'HELEN','MILLER',TO_DATE('1991-05-02','YYYY-MM-DD'),79238938,'hmiller@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9015,'CAROL','GARCIA',TO_DATE('1995-04-21','YYYY-MM-DD'),73247839,'cgarcia@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9016,'JAMES','MARCUS',TO_DATE('1982-01-30','YYYY-MM-DD'),79347730,'jmarcus@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9017,'WILLIAM','FIFTYSIX',TO_DATE('1993-09-09','YYYY-MM-DD'),70628233,'wfiftysix@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9018,'DANIEL','GIBSON',TO_DATE('1988-04-20','YYYY-MM-DD'),75678902,'dgibson@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9019,'PAUL','FENDER',TO_DATE('1993-03-26','YYYY-MM-DD'),72136278,'pfender@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9020,'JEREMY','DUNLOP',TO_DATE('1997-08-27','YYYY-MM-DD'),73246783,'jdunlop@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9021,'PAUL','TURTLE',TO_DATE('1995-10-30','YYYY-MM-DD'),72137233,'pturtle@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9022,'KIM','STRAWBERRY',TO_DATE('1994-03-29','YYYY-MM-DD'),73243728,'kstrawberry@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9023,'YUBIN','HAN',TO_DATE('1993-11-22','YYYY-MM-DD'),73284382,'yhan@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9024,'FERNANDO','GODIN',TO_DATE('1995-07-21','YYYY-MM-DD'),71278322,'fgodin@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9025,'RICARDO','QUARESMA',TO_DATE('1998-04-27','YYYY-MM-DD'),79048328,'rquaresma@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9026,'CHRIS','CORNELL',TO_DATE('1990-02-05','YYYY-MM-DD'),79232232,'ccornell@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9027,'MARCO','SLIM',TO_DATE('1990-10-11','YYYY-MM-DD'),79623626,'mslim@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9028,'FERNANDO','HART',TO_DATE('1997-01-26','YYYY-MM-DD'),79748384,'fhart@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9029,'FERNANDO','BONAMASSA',TO_DATE('1997-12-21','YYYY-MM-DD'),79052368,'fbonamassa@g.com');
INSERT INTO SWIMMER (IDSWIMMER,FIRSTNAME,LASTNAME,DATEOFBIRTH,PHONENUMBER,EMAIL) VALUES
(9030,'SALAH','SWORD',TO_DATE('1990-10-11','YYYY-MM-DD'),71237831,'ssword@g.com');


INSERT INTO PURCHASEITEM(IDPURCHASEITEM,IDSWIMMER,IDITEM,DATES) VALUES
(001,9003,0002,TO_DATE('2017-05-30', 'YYYY-MM-DD'));
INSERT INTO PURCHASEITEM(IDPURCHASEITEM,IDSWIMMER,IDITEM,DATES) VALUES
(002,9021,0004,TO_DATE('2017-05-17', 'YYYY-MM-DD'));
INSERT INTO PURCHASEITEM (IDPURCHASEITEM,IDSWIMMER,IDITEM,DATES)VALUES
(003,9015,0004,TO_DATE('2017-05-17', 'YYYY-MM-DD'));
INSERT INTO PURCHASEITEM (IDPURCHASEITEM,IDSWIMMER,IDITEM,DATES)VALUES
(004,9009,0003,TO_DATE('2017-05-09', 'YYYY-MM-DD'));
INSERT INTO PURCHASEITEM (IDPURCHASEITEM,IDSWIMMER,IDITEM,DATES)VALUES
(005,9010,0004,TO_DATE('2017-04-15', 'YYYY-MM-DD'));
INSERT INTO PURCHASEITEM(IDPURCHASEITEM,IDSWIMMER,IDITEM,DATES)VALUES
(006,9003,0001,TO_DATE('2017-04-19', 'YYYY-MM-DD'));
INSERT INTO PURCHASEITEM (IDPURCHASEITEM,IDSWIMMER,IDITEM,DATES) VALUES
(007,9011,0005,TO_DATE('2017-02-06', 'YYYY-MM-DD'));
INSERT INTO PURCHASEITEM (IDPURCHASEITEM,IDSWIMMER,IDITEM,DATES) VALUES
(008,9001,0006,TO_DATE('2017-01-13', 'YYYY-MM-DD'));


INSERT INTO IDENTITYCARD(IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(01,9001,TO_DATE('2017-01-01', 'YYYY-MM-DD'),TO_DATE('2019-01-01','YYYY-MM-DD'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(02,9002,TO_DATE('2016-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01','yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE)VALUES
(03,9003,TO_DATE('2015-03-01', 'yyyy-mm-dd'),TO_DATE('2019-03-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE)VALUES
(04,9004,TO_DATE('01-01-2015'),NULL);
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE)VALUES
(05,9005,TO_DATE('2017-07-01', 'yyyy-mm-dd'),TO_DATE('2018-07-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD(IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(06,9006,TO_DATE('2017-09-01', 'yyyy-mm-dd'),TO_DATE('2020-09-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(07,9007,TO_DATE('2016-02-01', 'yyyy-mm-dd'),TO_DATE('2019-02-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(08,9008,TO_DATE('2017-03-01', 'yyyy-mm-dd'),TO_DATE('2019-03-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(09,9009,TO_DATE('2016-04-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(10,9010,TO_DATE('2015-01-01', 'yyyy-mm-dd'),TO_DATE('2020-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(11,9011,TO_DATE('2017-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(12,9012,TO_DATE('01-01-2013'),NULL);
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(13,9013,TO_DATE('2014-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(14,9014,TO_DATE('2015-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(15,9015,TO_DATE('2017-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(16,9016,TO_DATE('2013-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(17,9017,TO_DATE('2017-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(18,9018,TO_DATE('2017-03-01', 'yyyy-mm-dd'),TO_DATE('2019-03-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(19,9019,TO_DATE('2017-04-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(20,9020,TO_DATE('01-01-2017'),NULL);
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(21,9021,TO_DATE('2017-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(22,9022,TO_DATE('2017-04-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(23,9023,TO_DATE('01-01-2017'),NULL);
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(24,9024,TO_DATE('01-01-2016'),NULL);
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(25,9025,TO_DATE('2016-01-01', 'yyyy-mm-dd'),TO_DATE('2020-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(26,9026,TO_DATE('2017-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(27,9027,TO_DATE('2017-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(28,9028,TO_DATE('2017-01-01', 'yyyy-mm-dd'),TO_DATE('2020-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE)VALUES
(29,9029,TO_DATE('2017-01-01', 'yyyy-mm-dd'),TO_DATE('2019-01-01', 'yyyy-mm-dd'));
INSERT INTO IDENTITYCARD (IDIDENTITYCARD,IDSWIMMER,ACTIVATEDATE,FINISHINGDATE) VALUES
(30,9030,TO_DATE('2017-04-01', 'yyyy-mm-dd'),TO_DATE('2020-04-01', 'yyyy-mm-dd'));


INSERT INTO SWIMMING(IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(01,01);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(02,03);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(03,02);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(04,05);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(05,04);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(06,01);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(07,01);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(08,02);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(09,05);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(10,04);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(11,03);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(12,05);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(13,02);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(14,03);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(15,04);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(16,04);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(17,05);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(18,04);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(19,03);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(20,02);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(21,02);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(22,02);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(23,01);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(24,01);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(25,03);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(26,04);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(27,05);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(28,02);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES) VALUES
(29,03);
INSERT INTO SWIMMING (IDSWIMMINGIDENTITYCARD,IDSWIMMINGCLASSES)VALUES
(30,01);


INSERT INTO POOL(IDPOOL,"NAME",CAPACITY,"LOCATION") VALUES
(01,'SUNPOOLNR1',50,'Centrum');
INSERT INTO POOL (IDPOOL,"NAME",CAPACITY,"LOCATION")VALUES
(02,'BEACHPOOLNR2',30,'Kabaty');


INSERT INTO POOLLINE(IDPOOLLINE,LINENUMBER,IDPOOL) VALUES
(01,1,01);
INSERT INTO POOLLINE(IDPOOLLINE,LINENUMBER,IDPOOL) VALUES
(02,2,01);
INSERT INTO POOLLINE(IDPOOLLINE,LINENUMBER,IDPOOL) VALUES
(03,3,01);
INSERT INTO POOLLINE(IDPOOLLINE,LINENUMBER,IDPOOL) VALUES
(04,4,02);
INSERT INTO POOLLINE(IDPOOLLINE,LINENUMBER,IDPOOL) VALUES
(05,5,02);
INSERT INTO POOLLINE(IDPOOLLINE,LINENUMBER,IDPOOL) VALUES
(06,6,02);


INSERT INTO CLASSESINPOOLLINE(IDCIPLCLASSES,IDCIPLPOOLLINE) VALUES
(01,01);
INSERT INTO CLASSESINPOOLLINE(IDCIPLCLASSES,IDCIPLPOOLLINE)VALUES
(02,03);
INSERT INTO CLASSESINPOOLLINE (IDCIPLCLASSES,IDCIPLPOOLLINE) VALUES
(03,02);
INSERT INTO CLASSESINPOOLLINE (IDCIPLCLASSES,IDCIPLPOOLLINE) VALUES
(04,04);
INSERT INTO CLASSESINPOOLLINE (IDCIPLCLASSES,IDCIPLPOOLLINE) VALUES
(05,05);

--QUERIES
--Select Statements
select * from classes;
select * from classesinpoolline;
select * from department;
select * from identitycard;
select * from item;
select * from organisation;
select * from pool;
select * from poolline;
select * from purchaseitem;
select * from staffmember;
select * from swimmer;
select * from swimming;

SELECT FirstName ,LastName, position ,salary,idClasses
FROM StaffMember s,Organisation o,Classes c
WHERE s.IdStaffMember = o.which_staffmember and c.IdClasses = o.which_class;

SELECT FirstName ,salary+150, position
FROM StaffMember
where position = 'INSTRUCTOR'
order by salary desc;

SELECT S.firstname , C.Idclasses , I.ActivateDate , I.FinishingDate
FROM Swimmer S , IdentityCard I , Swimming Si , Classes C
WHERE S.IDSWIMMER =I.IDSWIMMER and Si.IDSWIMMINGIDENTITYCARD = I.IDIDENTITYCARD and C.IDCLASSES = Si.IDSWIMMINGCLASSES;

SELECT S.firstname , S.lastname , C.Idclasses
FROM Swimmer S , IdentityCard I , Swimming Si , Classes C
WHERE S.IDSWIMMER =I.IDSWIMMER and Si.IDSWIMMINGIDENTITYCARD = I.IDIDENTITYCARD and C.IDCLASSES = Si.IDSWIMMINGCLASSES and Idclasses = '4';

SELECT itemname,dates,price
FROM ITEM i INNER JOIN PURCHASEITEM ps ON i.Iditem =ps.Iditem;

SELECT firstname,lastname,email,activatedate,finishingdate
FROM Swimmer s INNER JOIN IdentityCard c on s.IdSwimmer = c.IdSwimmer
WHERE email = 'aflower@g.com';

--Aggregate Functions
SELECT position,AVG(salary)
from StaffMember s 
group by position
order by position;

SELECT COUNT(IDSTAFFMEMBER)
FROM STAFFMEMBER s ,ORGANISATION o ,CLASSES c
WHERE s.IdStaffMember = o.which_staffmember and c.IdClasses = o.which_class;

SELECT count(idSwimmer)
from Swimmer s
order by(1);

SELECT  max(dateofbirth) 
from swimmer;

SELECT max(Price)
from item
UNION
SELECT min(Price)
from item;

SELECT count(Location)
from pool
where location = 'Kabaty';

-- Subqueries
SELECT position
FROM  StaffMember s
WHERE s.IdStaffMember IN (SELECT IdStaffMember
                            from StaffMember
                            where firstname = 'JOHN');
                            
Select firstname , salary
from staffmember
where salary  = (Select salary 
                from staffmember
                where firstname ='KEITH');   
                
SELECT position, AVG(salary)
FROM StaffMember 
HAVING avg(salary) = (Select max(avg(salary))
                       from staffmember
                        group by position)
GROUP BY position
UNION
SELECT position, AVG(salary)
from StaffMember
HAVING avg(salary) = (Select MIN(avg(salary))
                        from staffmember
                        group by position)
GROUP BY position;  

-- Correlated Subqueries
--Top 4 earnings
Select firstname ,lastname, position, salary
from staffmember s
where 4 > (select count(p1.salary)
            from staffmember p1
            where p1.salary > s.salary)
order by salary desc;

--Find persons who has lowest salary in their job category.
SELECT firstname, position , salary
from staffmember
where salary IN (select min(salary)
                from staffmember
                group by position)
order by position desc;

SELECT Min(salary),position
from staffmember
group by position;

--CREATING NEW TABLES
CREATE TABLE A_STAFFMEMBER AS SELECT * FROM STAFFMEMBER;
CREATE TABLE A_DEPARTMENT AS SELECT * FROM DEPARTMENT;
CREATE TABLE A_ITEM AS SELECT * FROM ITEM;
CREATE TABLE A_POOL AS SELECT * FROM POOL;
CREATE TABLE A_SWIMMER AS SELECT * FROM SWIMMER;
CREATE TABLE A_IDENTITYCARD AS SELECT * FROM IDENTITYCARD;


--TRIGGERS
--1
-- When user update update new Person,it shows sum of salary.
CREATE OR REPLACE TRIGGER SALARYTOTAL
AFTER UPDATE ON A_STAFFMEMBER
DECLARE
TOTAL NUMBER(10,2);
BEGIN
SELECT SUM(SALARY) INTO TOTAL FROM P_STAFFMEMBER;
DBMS_OUTPUT.PUT_LINE('TOTAL SALARY OF STAFF MEMBERS: ' || total);
END;

SET SERVEROUTPUT ON;
UPDATE A_STAFFMEMBER SET SALARY = 4300 WHERE IDSTAFFMEMBER = 1013;
SELECT * FROM A_STAFFMEMBER;

--2 (TABLE TRIGGER -AFTER STATEMENT and for UPDATE Statements. )
--When user update new salary,it shows old and new salary and difference between new and old salary.
CREATE OR REPLACE  TRIGGER SALARY_DIFF
AFTER UPDATE ON A_STAFFMEMBER
FOR EACH ROW
DECLARE 
salary_gap NUMBER;
BEGIN
salary_gap := :NEW.SALARY - :OLD.SALARY;
DBMS_OUTPUT.PUT('Old salary = ' || :OLD.SALARY || ', ');
DBMS_OUTPUT.PUT('New salary = ' || :NEW.SALARY || ', ');
DBMS_OUTPUT.PUT_LINE('Difference: ' || salary_gap);
END;

SET SERVEROUTPUT ON;
UPDATE A_STAFFMEMBER SET SALARY = 9900 WHERE IDSTAFFMEMBER = 1010;

SELECT IDSTAFFMEMBER,SALARY from A_STAFFMEMBER where idstaffmember = 1010;

--3 (TABLE TRIGGER - BEFORE STATEMENT - and for INSERT,UPDATE,DELETE Statements ) 
--When user add new Person, it shows "Inserting Persons"
--When user change the Person's name, it shows "Old name" updated to "New name"
--When user delete a person from Table Person, it show "Name" deleted.
CREATE OR REPLACE TRIGGER CHANGES_ON_STAFFMEMBER
BEFORE INSERT OR UPDATE OR DELETE
ON A_STAFFMEMBER
FOR EACH ROW
BEGIN
    CASE
        WHEN INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('Inserting new Staff Member');
        WHEN UPDATING THEN
        DBMS_OUTPUT.PUT_LINE(:OLD.FIRSTNAME ||  ' updated to ' || :NEW.FIRSTNAME);
        WHEN DELETING THEN
        DBMS_OUTPUT.PUT_LINE('STAFF MEMBER WHOSE NAME IS '||  :OLD.FIRSTNAME ||' Deleted. ');
        END CASE;
END;

INSERT INTO A_STAFFMEMBER(IdStaffMember,FirstName,LastName,DateofBirth,Position,Salary,Email,IdDept) VALUES
(1024,'LUCY','GALLAGHER',TO_DATE('1996-08-13','YYYY-MM-DD'),'Junior',4000,'lgallagher@g.com',25);

DELETE FROM A_STAFFMEMBER WHERE FIRSTNAME = 'LUCY';

UPDATE A_STAFFMEMBER SET FIRSTNAME ='EDDIE' WHERE IDSTAFFMEMBER=1021;

SELECT * FROM A_STAFFMEMBER;

--4 ( COUNTER EXAMPLE ) (ROW TRIGGER - AFTER STATEMENTS - INSERT OR DELETE STATEMENTS ) 
--When user Insert or Delete Items from ITEM TABLE,it will count number of the actual item and shows "There are ... items in the Shop"
create or replace trigger CountItem
after insert or delete on A_ITEM
declare
    counter number;
begin
  select count(*) into counter from A_ITEM;
  dbms_output.put_line('there are ' || counter || ' item in ITEM SHOP ');
end;

INSERT INTO A_ITEM (IDITEM,ITEMNAME,PRICE) VALUES (7, 'MONOFIN',100);

delete from A_ITEM where IDITEM = 7;

select * from A_ITEM;

--PROCEDURES
--1 
--Changing poisition of Staff Members.
--Includes exception(will show if there is no position like that),no cursor.
CREATE OR REPLACE PROCEDURE CHANGE_POSITION(oldPos VARCHAR2,newPos VARCHAR2)
AS
staff_numb NUMBER(4);
no_such_position exception;
BEGIN
SELECT COUNT(IDSTAFFMEMBER) INTO staff_numb FROM A_STAFFMEMBER WHERE position = oldPos;
IF staff_numb=0 then raise no_such_position;
ELSE
UPDATE A_STAFFMEMBER SET position=newPos where position=oldPos;
dbms_output.put_line( staff_numb ||' '|| oldPos || ' will be working as a '||newPos || ' from now on.'); 
END IF;
exception 
    when no_such_position then
    dbms_output.put_line('There is no position like that'); 
END;

select *
from a_staffmember;

SET SERVEROUTPUT ON;
EXECUTE CHANGE_POSITION('CLERK','CLEANER');

--2 Assistants will be "TRAINER" anymore
create or replace procedure ASSISTANT_TO_TRAINER as
cursor A is  select IDSTAFFMEMBER from A_STAFFMEMBER where position='ASSISTANT';
D NUMBER(4);
BEGIN
OPEN A;
    LOOP
    FETCH A INTO D;
    EXIT WHEN A%NOTFOUND;
        update A_STAFFMEMBER set position='TRAINER' where IDSTAFFMEMBER = D;
        dbms_output.put_line(D || ' is trainer anymore');    
    END LOOP;
COMMIT;
CLOSE A;
END;

EXECUTE ASSISTANT_TO_TRAINER();

select firstname,position
from A_staffmember a
where a.POSITION = 'ASSISTANT';

UPDATE A_STAFFMEMBER SET POSITION ='ASSISTANT' WHERE FIRSTNAME ='KARINA';
UPDATE A_STAFFMEMBER SET POSITION ='ASSISTANT' WHERE FIRSTNAME ='ANTONY';

--3 
-- INSERTING A NEW SWIMMER WITH PARAMETERS,exception
create or replace PROCEDURE NEW_SWIMMER(s_firstname VARCHAR2,s_lastname VARCHAR2 ,s_dob DATE,s_email VARCHAR2)
AS
N number;
M number;
T number;
PERSON_exists exception;
BEGIN
SELECT count(idSwimmer)INTO N FROM A_SWIMMER WHERE lastname = s_lastname; 
if N >0 then raise person_exists;
else
select NVL(MAX(IDSWIMMER)+1,1) INTO M FROM A_SWIMMER;
select MAX(PHONENUMBER)+10 INTO T FROM A_SWIMMER;
INSERT INTO A_SWIMMER(idSwimmer,firstname,lastname,dateofbirth,phonenumber,email)
VALUES(M,s_firstname,s_lastname,s_dob,T,s_email);
end if;
exception
when PERSON_exists then
dbms_output.put_line('WE HAVE THIS SWIMMER');
END;

SELECT *
FROM A_SWIMMER;

SET SERVEROUTPUT ON;
EXECUTE NEW_SWIMMER('MAREK','STONE',TO_DATE('2015-03-01', 'yyyy-mm-dd'),'marekh@g.com');

DELETE FROM A_SWIMMER WHERE FIRSTNAME = 'MAREK';

--4 RISING SALARIES OF ACCOUNTANTS AND DIRECTORS
create or replace PROCEDURE RISING_SALARY AS
CURSOR CP IS SELECT IDSTAFFMEMBER FROM A_STAFFMEMBER WHERE position IN('ACCOUNTANT','DIRECTOR');
D NUMBER(4);
K NUMBER(4);
empty_position exception;
BEGIN
select count(IDSTAFFMEMBER) into D FROM A_STAFFMEMBER where position in('ACCOUNTANT','DIRECTOR');
if D=0 then raise empty_position;
    else
OPEN CP;
    LOOP
    FETCH CP INTO K;
    EXIT WHEN CP%NOTFOUND;
    UPDATE A_STAFFMEMBER SET SALARY =SALARY*2 WHERE IDSTAFFMEMBER=K AND position='ACCOUNTANT';
        UPDATE A_STAFFMEMBER SET SALARY =SALARY*1.2 WHERE IDSTAFFMEMBER=K AND position='MANAGER';
     IF CP%ROWCOUNT =3 THEN dbms_output.put_line('3 salaries has been already changed'); 
     end if;
     END LOOP;
     END IF;
     COMMIT;
     CLOSE CP;
 exception 
    when empty_position then
    dbms_output.put_line('NOBODY WORKS IN THIS POSITION'); 
END;

select *
from A_staffmember
where position in('ACCOUNTANT','DIRECTOR');

SET SERVEROUTPUT ON;
EXECUTE RISING_SALARY();

--Function (price difference between items with parameter)
--Adding practice
CREATE OR REPLACE FUNCTION FUNC_DIFF(N1 IN NUMBER,N2 IN NUMBER)
RETURN NUMBER
IS
n3 NUMBER(10,2)
BEGIN
N3:= N1 + N2;
RETURN N3;
END;

select FUNC_DIFF(20,30) FROM DUAL;

select * from item;
--FIND MAX AND MIN PRICE OF ITEMS,SHOW THE DIFFERENCE.
CREATE OR REPLACE FUNCTION ITEM_PRICE
RETURN NUMBER
IS
M NUMBER(2) := 0;
N NUMBER(2) := 0;
BEGIN
SELECT MAX(PRICE) INTO M
FROM A_ITEM;
SELECT MIN(PRICE) INTO N
FROM A_ITEM
RETURN M-N;
END;

select ITEM_PRICE() FROM DUAL;

--3
--ADD THE TOTAL SUM OF THE SALARY.
create or replace FUNCTION ADD_SUM(N1 IN NUMBER)
RETURN NUMBER
AS
TOTAL NUMBER(8) := 0;
BEGIN
SELECT SUM(SALARY) INTO TOTAL FROM A_STAFFMEMBER;
TOTAL := TOTAL + N1;
RETURN TOTAL;
END;

set serveroutput on; 
declare 
answer integer; 
begin 
answer:=add_sum(880); 
   dbms_output.put_line('The last version of SUM ' || answer);   
end; 

--4 It will Upgrade Capacity if capacity < 20 ( Capacity will be the number of Swimmer X2 automatically) 
create or replace procedure UPGRADE_CAP as
cursor A is  select IDPOOL from A_POOL where CAPACITY < 20;
D NUMBER;
TOT NUMBER;
BEGIN
OPEN A;
    LOOP
    FETCH A INTO D;
    EXIT WHEN A%NOTFOUND;
    SELECT COUNT(IDSWIMMER) INTO TOT FROM A_SWIMMER;
    TOT:= TOT*2;
        update A_POOL set CAPACITY = TOT where IDPOOL = D;
    END LOOP;
COMMIT;
CLOSE A;
END;

select * from a_pool;

SET SERVEROUTPUT ON;
UPDATE A_POOL SET CAPACITY = 5 WHERE IDPOOL=2;

EXECUTE UPGRADE_CAP();


--5 (TABLE TRIGGER - AFTER STATEMENT - UPDATE STATEMENTS )
--When user change the capacity of pool,there is a condition.So if it is less or equal than 20,It will have a WARNING!.
--Raise_application_error('ITS AN ERROR!!');

create or replace TRIGGER CHECK_CAPACITIY_POOL
After UPDATE ON A_POOL
FOR EACH ROW
DECLARE
vCapacity Integer;
BEGIN
vCapacity := :NEW.CAPACITY;
    IF UPDATING THEN
        IF vCapacity <= 20 THEN
            DBMS_OUTPUT.PUT_LINE('WARNING - CAPACITY MUST BE HIGHER THAN 20!!!');
            UPGRADE_CAP();
            DBMS_OUTPUT.PUT_LINE('IT AUTOMATICALLY CHANGED UP TO THE NUMBER OF SWIMMERS');
        END IF;
    END IF;
END;

UPDATE A_POOL SET CAPACITY = 30 WHERE IDPOOL=2;
select * from A_POOL;
